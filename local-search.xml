<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>macos下安装PD20Linux虚拟机以及PDTools的坑</title>
    <link href="/2025/01/29/macos%E4%B8%8B%E5%AE%89%E8%A3%85pd20%E4%BB%A5%E5%8F%8Apdtools%E7%9A%84%E5%9D%91/"/>
    <url>/2025/01/29/macos%E4%B8%8B%E5%AE%89%E8%A3%85pd20%E4%BB%A5%E5%8F%8Apdtools%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="安装PD20虚拟机的问题"><a href="#安装PD20虚拟机的问题" class="headerlink" title="安装PD20虚拟机的问题"></a>安装PD20虚拟机的问题</h1><h1 id="安装PDTools的问题"><a href="#安装PDTools的问题" class="headerlink" title="安装PDTools的问题"></a>安装PDTools的问题</h1><ul><li>没有.&#x2F;install 权限</li><li>安装失败 缺少安装包</li><li>缺少依赖项</li></ul>]]></content>
    
    
    <categories>
      
      <category>issue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>issue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5-longestPalidrome</title>
    <link href="/2025/01/29/5-longestPalidrome/"/>
    <url>/2025/01/29/5-longestPalidrome/</url>
    
    <content type="html"><![CDATA[<h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>(),l = <span class="hljs-number">0</span>,r = <span class="hljs-number">0</span>,length = <span class="hljs-number">1</span>,index = <span class="hljs-number">0</span>,max_length = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) &#123;<br>            l = i - <span class="hljs-number">1</span>;<br>            r = i + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (l &gt;= <span class="hljs-number">0</span> &amp;&amp; s[l] == s[i]) &#123;<br>                length++;<br>                l--;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (r &lt; n &amp;&amp; s[r] == s[i]) &#123;<br>                length++;<br>                r++;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (l &gt;= <span class="hljs-number">0</span> &amp;&amp; r &lt; n &amp;&amp; s[l] == s[r]) &#123;<br>                length += <span class="hljs-number">2</span>;<br>                l--;<br>                r++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (length &gt; max_length) &#123;<br>                max_length = length;<br>                index = l;<br>            &#125;<br>            length = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">substr</span>(index + <span class="hljs-number">1</span>,max_length);<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithms</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0-Home-page</title>
    <link href="/2025/01/29/0-Home-page/"/>
    <url>/2025/01/29/0-Home-page/</url>
    
    <content type="html"><![CDATA[<h1 id="Home-page"><a href="#Home-page" class="headerlink" title="Home page"></a>Home page</h1>]]></content>
    
    
    <categories>
      
      <category>master</category>
      
    </categories>
    
    
    <tags>
      
      <tag>master</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.addTwoNumbers</title>
    <link href="/2025/01/29/2-addTwoNumbers/"/>
    <url>/2025/01/29/2-addTwoNumbers/</url>
    
    <content type="html"><![CDATA[<h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>      <span class="hljs-type">int</span> val;<br>      ListNode *next;<br>      <span class="hljs-built_in">ListNode</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>      <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>      <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x, ListNode *next) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(next) &#123;&#125;<br> &#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>        ListNode* head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">-1</span>,<span class="hljs-literal">nullptr</span>);<br>        ListNode* temp = head;  <span class="hljs-comment">//创建dummyNode 简化边界条件计算</span><br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (l1 || l2) &#123;<br>            <span class="hljs-type">int</span> a = l1 == <span class="hljs-literal">nullptr</span>?<span class="hljs-number">0</span>:l1-&gt;val;    <span class="hljs-comment">//如果l1为nullptr 表示l1遍历完了 赋值为0</span><br>            <span class="hljs-type">int</span> b = l2 == <span class="hljs-literal">nullptr</span>?<span class="hljs-number">0</span>:l2-&gt;val;    <span class="hljs-comment">//l2同理</span><br>            sum += a + b;<br>            temp-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(sum % <span class="hljs-number">10</span>);<br>            sum /= <span class="hljs-number">10</span>;<br>            temp = temp-&gt;next;<br>            <span class="hljs-keyword">if</span> (l1) l1 = l1-&gt;next;<br>            <span class="hljs-keyword">if</span> (l2) l2 = l2-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (sum &gt; <span class="hljs-number">0</span>) temp-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> head-&gt;next;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">review 2024.6.11</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> carry = <span class="hljs-number">0</span>;<br>        ListNode* ans = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>();<br>        ListNode* temp = ans;<br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">nullptr</span> || l2 != <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-type">int</span> x,y,z;<br>            <span class="hljs-keyword">if</span> (!l1) &#123;<br>                x = <span class="hljs-number">0</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                x = l1-&gt;val;<br>                l1 = l1-&gt;next;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!l2) &#123;<br>                y = <span class="hljs-number">0</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                y = l2-&gt;val;<br>                l2 = l2-&gt;next;<br>            &#125;<br>            temp-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>();<br>            temp = temp-&gt;next;<br>            z = carry + x + y;<br>            <span class="hljs-keyword">if</span> (z &gt; <span class="hljs-number">9</span>) &#123;<br>                carry = <span class="hljs-number">1</span>;<br>                temp-&gt;val = z % <span class="hljs-number">10</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                temp-&gt;val = z;<br>                carry = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (carry == <span class="hljs-number">1</span>) &#123;<br>            temp-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>();<br>            temp-&gt;next-&gt;val = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithms</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.lengthOfLongestSubstring</title>
    <link href="/2025/01/29/3-lengthOfLongestSubstring/"/>
    <url>/2025/01/29/3-lengthOfLongestSubstring/</url>
    
    <content type="html"><![CDATA[<h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">滑动窗口</span><br><span class="hljs-comment">1.遍历string 用hash存储每个char出现的次数</span><br><span class="hljs-comment">2.每次记录最大的length 当出现重复元素时 移动left去重</span><br><span class="hljs-comment">3.更新length = right - left + 1</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>,r = <span class="hljs-number">0</span>;<br>        unordered_map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; cnt;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (;r &lt; n;r++) &#123;<br>            cnt[s[r]]++;<br>            <span class="hljs-keyword">while</span> (cnt[s[r]] &gt; <span class="hljs-number">1</span>) &#123;     <span class="hljs-comment">//去重操作</span><br>                cnt[s[l]]--;            <span class="hljs-comment">//先在hashTable中修改</span><br>                l++;                    <span class="hljs-comment">//移动left</span><br>            &#125;   <br>            ans = <span class="hljs-built_in">max</span>(ans,r-l<span class="hljs-number">+1</span>);       <span class="hljs-comment">//uodate longest length</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">review 2024.2.23</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; record;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>,i = <span class="hljs-number">0</span>;j &lt; s.<span class="hljs-built_in">size</span>();j++) &#123;<br>            record[s[j]]++;<br>            cnt++;<br>            <span class="hljs-keyword">while</span> (record[s[j]] &gt; <span class="hljs-number">1</span>) &#123;<br>                record[s[i++]]--;<br>                cnt--;<br>            &#125;<br>            ret = <span class="hljs-built_in">max</span>(cnt,ret);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">review 6.19</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        unordered_set&lt;<span class="hljs-type">char</span>&gt; hash;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>,r = <span class="hljs-number">0</span>;r &lt; s.<span class="hljs-built_in">size</span>();r++) &#123;<br>            <span class="hljs-keyword">while</span> (hash.<span class="hljs-built_in">find</span>(s[r]) != hash.<span class="hljs-built_in">end</span>()) &#123;<br>                hash.<span class="hljs-built_in">erase</span>(s[l]);<br>                l++;<br>            &#125;<br>            hash.<span class="hljs-built_in">insert</span>(s[r]);<br>            ans = <span class="hljs-built_in">max</span>(ans,r - l + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">review 2024.7.8</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>,r = <span class="hljs-number">0</span>;<br>        unordered_set&lt;<span class="hljs-type">int</span>&gt; hash;<br>        <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (;r &lt; s.<span class="hljs-built_in">size</span>();r++) &#123;<br>            <span class="hljs-keyword">while</span> (hash.<span class="hljs-built_in">contains</span>(s[r])) &#123; <span class="hljs-comment">//c++20</span><br>                hash.<span class="hljs-built_in">erase</span>(s[l++]);<br>            &#125;<br>            hash.<span class="hljs-built_in">insert</span>(s[r]);<br>            ret = <span class="hljs-built_in">max</span>(ret,r - l + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithms</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-twoSum</title>
    <link href="/2025/01/28/1-twoSum/"/>
    <url>/2025/01/28/1-twoSum/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">23.12.17</span><br><span class="hljs-comment">solution：</span><br><span class="hljs-comment">因为是寻找匹配元素 寻找 target - 每一个元素的另一元素</span><br><span class="hljs-comment">所以想到hashtable 并且要return下标 所以要用std::unordered_map 底层用哈希表实现 无序 不可以重复</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">1.创建一个empty map</span><br><span class="hljs-comment">2.遍历整个vector 在map中找是否存在匹配值：</span><br><span class="hljs-comment">                                    如果不匹配 就把元素插入到map中</span><br><span class="hljs-comment">                                    如果匹配 就return</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        std::unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; hashtable;<br>        <span class="hljs-type">int</span> len = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; len;i++) &#123;<br>            <span class="hljs-type">int</span> temp = target-nums[i];<br>            <span class="hljs-keyword">if</span> (hashtable.<span class="hljs-built_in">find</span>(temp) != hashtable.<span class="hljs-built_in">end</span>()) &#123;<br>                <span class="hljs-keyword">return</span> &#123;hashtable[temp],i&#125;;<br>            &#125;<br>            hashtable[nums[i]] = i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>&#125;;<br><br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">2023.12.17</span><br><span class="hljs-comment">brute force     O(n^2)</span><br><span class="hljs-comment">1.暴力两个for循环 第一个loop遍历n-1个元素</span><br><span class="hljs-comment">2.因为一个位置的两个元素不能重复使用 所以第二个loop从i+1开始遍历整个vector</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        std::vector&lt;<span class="hljs-type">int</span>&gt; ret;<br>        <span class="hljs-type">int</span> len = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; len<span class="hljs-number">-1</span>;i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i<span class="hljs-number">+1</span>;j &lt; len;j++) &#123;<br>                <span class="hljs-keyword">if</span> (nums[i] + nums[j] == target) &#123;<br>                    ret.<span class="hljs-built_in">push_back</span>(i);<br>                    ret.<span class="hljs-built_in">push_back</span>(j);<br>                    <span class="hljs-keyword">return</span> ret;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="summary："><a href="#summary：" class="headerlink" title="summary："></a>summary：</h3><p>1.c++的哈希表用了动态数组的方式和哈希函数组成<br>2.插入可以用pair函数 也可以写成 nums_map.insert({nums[i],i}); 用初始化列表的方式</p>]]></content>
    
    
    <categories>
      
      <category>Algorithms</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithms</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
