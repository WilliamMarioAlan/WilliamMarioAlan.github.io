<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2025/01/31/git/"/>
    <url>/2025/01/31/git/</url>
    
    <content type="html"><![CDATA[<h1 id="Quick-start"><a href="#Quick-start" class="headerlink" title="Quick start"></a>Quick start</h1><p>在 <strong>Git</strong> 中，“分区”是指代码管理的不同区域，包括工作目录（Working Directory）、暂存区（Stage&#x2F;Index）、以及本地仓库（Local Repository）。理解这些区域是学习和使用 Git 的核心，因为它们定义了代码在版本控制中的流转过程。</p><p>下面从概念、作用以及使用方法详细介绍 Git 的分区：</p><hr><h3 id="Git-分区概念"><a href="#Git-分区概念" class="headerlink" title="Git 分区概念"></a><strong>Git 分区概念</strong></h3><ol><li><strong>工作目录（Working Directory）</strong><ul><li><strong>定义</strong>：工作目录是用户实际操作的文件夹，是存放项目的实际文件的地方。它包含所有的项目文件，包括未被 Git 管理的文件和已经被管理的文件。</li><li><strong>状态</strong>：<ul><li><strong>已跟踪的文件</strong>：文件已经被 Git 记录在库中，可以被版本控制。</li><li><strong>未跟踪的文件</strong>：文件未被 Git 管理，通常是新创建或忽略的文件。</li></ul></li><li><strong>操作</strong>：<ul><li>编辑文件、创建文件或删除文件都发生在工作目录。</li></ul></li></ul></li><li><strong>暂存区（Stage&#x2F;Index）</strong><ul><li><strong>定义</strong>：暂存区是一个中间区域，存储的是即将提交到本地仓库的文件快照。你可以选择性地将修改的文件加入暂存区。</li><li><strong>作用</strong>：<ul><li>准备提交：用户可以选择哪些文件或哪些改动将被提交。</li><li>提供灵活性：允许多次修改后仅提交一部分内容。</li></ul></li><li><strong>操作</strong>：<ul><li><code>git add</code> 命令将文件从工作目录添加到暂存区。</li><li>用户可以反复更新暂存区内容，直到对提交内容满意为止。</li></ul></li></ul></li><li><strong>本地仓库（Local Repository）</strong><ul><li><strong>定义</strong>：本地仓库是存储在 <code>.git</code> 文件夹中的区域，用于保存所有提交的历史记录和对象。</li><li><strong>作用</strong>：<ul><li>提供完整的项目历史：包括所有提交的记录。</li><li>版本控制：可以对代码进行版本切换、回滚等操作。</li></ul></li><li><strong>操作</strong>：<ul><li><code>git commit</code> 将暂存区的内容提交到本地仓库。</li><li>用户可以查看提交记录（<code>git log</code>）并在不同版本间切换（<code>git checkout</code>）。</li></ul></li></ul></li><li><strong>远程仓库（Remote Repository）</strong><ul><li><strong>定义</strong>：远程仓库是托管在服务器上的仓库，用于多人协作。</li><li><strong>作用</strong>：<ul><li>用于团队合作时的版本共享。</li><li>实现备份功能。</li></ul></li><li><strong>操作</strong>：<ul><li>使用 <code>git push</code> 上传本地仓库内容到远程仓库。</li><li>使用 <code>git pull</code> 从远程仓库拉取最新代码。</li></ul></li></ul></li></ol><hr><h3 id="分区之间的流转"><a href="#分区之间的流转" class="headerlink" title="分区之间的流转"></a><strong>分区之间的流转</strong></h3><p>Git 的工作流可以简化为以下步骤：</p><ol><li><strong>工作目录 → 暂存区</strong>：<ul><li>修改工作目录中的文件后，使用 <code>git add &lt;file&gt;</code> 将文件的快照加入暂存区。</li></ul></li><li><strong>暂存区 → 本地仓库</strong>：<ul><li>使用 <code>git commit -m &quot;message&quot;</code> 提交暂存区内容到本地仓库，创建一个新的版本。</li></ul></li><li><strong>本地仓库 → 远程仓库</strong>：<ul><li>使用 <code>git push origin &lt;branch&gt;</code> 将本地仓库的更改推送到远程仓库。</li></ul></li><li><strong>远程仓库 → 本地仓库&#x2F;工作目录</strong>：<ul><li>使用 <code>git pull</code> 或 <code>git fetch</code> 拉取远程仓库的更新到本地。</li></ul></li></ol><hr><h3 id="Git-分区的状态查询"><a href="#Git-分区的状态查询" class="headerlink" title="Git 分区的状态查询"></a><strong>Git 分区的状态查询</strong></h3><p>Git 提供了多种工具来查看文件在分区之间的状态：</p><ol><li><p><strong>查看文件状态</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status<br></code></pre></td></tr></table></figure><ul><li>显示工作目录和暂存区中文件的状态（已跟踪、未跟踪、修改等）。</li></ul></li><li><p><strong>查看工作目录和暂存区的差异</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git diff<br></code></pre></td></tr></table></figure><ul><li>显示工作目录与暂存区之间的差异。</li></ul></li><li><p><strong>查看暂存区和本地仓库的差异</strong></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git diff --cached<br></code></pre></td></tr></table></figure><ul><li>显示暂存区与上一次提交（本地仓库）的差异。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>tutorial</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>curlAndwget</title>
    <link href="/2025/01/30/curlAndwget/"/>
    <url>/2025/01/30/curlAndwget/</url>
    
    <content type="html"><![CDATA[<p><strong><code>wget</code> 和 <code>curl</code> 是两款强大的命令行工具，用于从网络上下载文件或与服务器交互，功能类似但有所侧重。以下是详细介绍：</strong></p><hr><h3 id="一、wget"><a href="#一、wget" class="headerlink" title="一、wget"></a>一、<code>wget</code></h3><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. <strong>概述</strong></h3><p><code>wget</code>（全称 “World Wide Web Get”）是一个非交互式网络下载工具。它的特点是简单高效，专注于下载文件，特别适合递归下载和处理网络中断后的续传。</p><h3 id="2-主要特性"><a href="#2-主要特性" class="headerlink" title="2. 主要特性"></a>2. <strong>主要特性</strong></h3><ul><li>支持 HTTP、HTTPS 和 FTP 协议。</li><li>支持断点续传。</li><li>可递归下载整个网站，甚至可将其保存为本地镜像。</li><li>易于脚本自动化集成。</li></ul><h3 id="3-基本用法"><a href="#3-基本用法" class="headerlink" title="3. 基本用法"></a>3. <strong>基本用法</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载单个文件</span><br>wget https://example.com/file.zip<br><br><span class="hljs-comment"># 下载并保存到指定文件名</span><br>wget -O custom_name.zip https://example.com/file.zip<br><br><span class="hljs-comment"># 断点续传下载</span><br>wget -c https://example.com/file.zip<br><br><span class="hljs-comment"># 下载整个网站（递归）</span><br>wget -r https://example.com<br><br><span class="hljs-comment"># 设置下载速度限制（以 KB/s 为单位）</span><br>wget --limit-rate=100k https://example.com/file.zip<br><br><span class="hljs-comment"># 指定用户代理（伪装浏览器）</span><br>wget --user-agent=<span class="hljs-string">&quot;Mozilla/5.0&quot;</span> https://example.com/file.zip<br><br><span class="hljs-comment"># 在后台运行并输出到日志文件</span><br>wget -b -o log.txt https://example.com/file.zip<br><br></code></pre></td></tr></table></figure><h3 id="4-高级功能"><a href="#4-高级功能" class="headerlink" title="4. 高级功能"></a>4. <strong>高级功能</strong></h3><ul><li><p><strong>镜像网站</strong>:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget --mirror -p --convert-links -P ./local_dir https://example.com<br><br></code></pre></td></tr></table></figure></li><li><p><strong>添加认证信息</strong>:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget --http-user=USERNAME --http-password=PASSWORD https://example.com/secure_file.zip<br><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="二、curl"><a href="#二、curl" class="headerlink" title="二、curl"></a>二、<code>curl</code></h3><h3 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1. 概述"></a>1. <strong>概述</strong></h3><p><code>curl</code>（全称 “Client URL”）是一个更为通用的命令行工具，可以用于与服务器交互，包括文件下载、上传、发送请求、查看响应头等。</p><h3 id="2-主要特性-1"><a href="#2-主要特性-1" class="headerlink" title="2. 主要特性"></a>2. <strong>主要特性</strong></h3><ul><li>支持大量协议（HTTP、HTTPS、FTP、SFTP、SMTP 等）。</li><li>可以自定义 HTTP 请求头。</li><li>支持 POST、PUT、DELETE 等各种 HTTP 方法。</li><li>更适合用于复杂的 API 调试和开发场景。</li></ul><h3 id="3-基本用法-1"><a href="#3-基本用法-1" class="headerlink" title="3. 基本用法"></a>3. <strong>基本用法</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载文件</span><br>curl -O https://example.com/file.zip<br><br><span class="hljs-comment"># 下载并保存为指定文件名</span><br>curl -o custom_name.zip https://example.com/file.zip<br><br><span class="hljs-comment"># 显示 HTTP 响应头</span><br>curl -I https://example.com<br><br><span class="hljs-comment"># 使用 POST 方法提交表单数据</span><br>curl -X POST -d <span class="hljs-string">&quot;key1=value1&amp;key2=value2&quot;</span> https://example.com/form<br><br><span class="hljs-comment"># 下载时显示进度条</span><br>curl -# -O https://example.com/file.zip<br><br><span class="hljs-comment"># 指定用户代理</span><br>curl -A <span class="hljs-string">&quot;Mozilla/5.0&quot;</span> https://example.com<br><br><span class="hljs-comment"># 添加认证信息</span><br>curl -u USERNAME:PASSWORD https://example.com/secure_file.zip<br><br></code></pre></td></tr></table></figure><h3 id="4-高级功能-1"><a href="#4-高级功能-1" class="headerlink" title="4. 高级功能"></a>4. <strong>高级功能</strong></h3><ul><li><p><strong>模拟 API 调用</strong>:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> -d <span class="hljs-string">&#x27;&#123;&quot;key&quot;:&quot;value&quot;&#125;&#x27;</span> https://api.example.com/endpoint<br><br></code></pre></td></tr></table></figure></li><li><p><strong>断点续传</strong>:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -C - -O https://example.com/file.zip<br><br></code></pre></td></tr></table></figure></li><li><p><strong>上传文件</strong>:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -F <span class="hljs-string">&quot;file=@local_file.txt&quot;</span> https://example.com/upload<br><br></code></pre></td></tr></table></figure></li><li><p><strong>保存 HTTP 响应头和内容</strong>:</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -D headers.txt -o content.html https://example.com<br><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="三、wget-和-curl-的比较"><a href="#三、wget-和-curl-的比较" class="headerlink" title="三、wget 和 curl 的比较"></a>三、<code>wget</code> 和 <code>curl</code> 的比较</h3><table><thead><tr><th>特性</th><th><code>wget</code></th><th><code>curl</code></th></tr></thead><tbody><tr><td><strong>目标用途</strong></td><td>文件下载（支持断点续传）</td><td>文件下载、API 调试和开发</td></tr><tr><td><strong>协议支持</strong></td><td>HTTP&#x2F;HTTPS&#x2F;FTP</td><td>多种协议（HTTP&#x2F;HTTPS&#x2F;FTP&#x2F;SFTP）</td></tr><tr><td><strong>递归下载</strong></td><td>支持</td><td>不支持</td></tr><tr><td><strong>断点续传</strong></td><td>支持（简单易用）</td><td>支持（需加参数）</td></tr><tr><td><strong>HTTP 请求定制</strong></td><td>基本支持</td><td>高度灵活</td></tr><tr><td><strong>命令复杂性</strong></td><td>简单直观</td><td>灵活但相对复杂</td></tr><tr><td><strong>默认安装情况</strong></td><td>大多数 Linux 发行版默认安装</td><td>部分系统需要手动安装</td></tr></tbody></table><hr><h3 id="四、应用场景总结"><a href="#四、应用场景总结" class="headerlink" title="四、应用场景总结"></a>四、应用场景总结</h3><ul><li><strong>文件下载</strong>：优先使用 <code>wget</code>，特别是大文件或需要递归下载的场景。</li><li><strong>API 调试和开发</strong>：优先使用 <code>curl</code>，因为它可以灵活构造 HTTP 请求并查看响应。</li><li><strong>脚本集成</strong>：视需求而定，<code>curl</code> 在更复杂场景中通常表现更强大。</li></ul><p>需要根据具体场景选择合适的工具，熟练掌握这两者能够极大提高工作效率。</p>]]></content>
    
    
    <categories>
      
      <category>tutorial</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>gcc/g++</title>
    <link href="/2025/01/30/gcc-g/"/>
    <url>/2025/01/30/gcc-g/</url>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><ul><li><code>I</code> 和 <code>L</code> 都是用来指定搜索路径的选项，但它们的作用完全不同，分别用于 <strong>编译阶段</strong> 和 <strong>链接阶段</strong>。</li></ul><hr><h3 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a><strong>主要区别</strong></h3><table><thead><tr><th>选项</th><th>用途</th><th>作用阶段</th><th>搜索内容</th></tr></thead><tbody><tr><td><code>-I</code></td><td>指定头文件搜索路径</td><td>编译阶段</td><td><code>.h</code>（头文件）</td></tr><tr><td><code>-L</code></td><td>指定库文件搜索路径</td><td>链接阶段</td><td><code>.so</code> &#x2F; <code>.a</code>（库）</td></tr></tbody></table><hr><h3 id="具体解释"><a href="#具体解释" class="headerlink" title="具体解释"></a><strong>具体解释</strong></h3><h3 id="1-I（Include-Path）"><a href="#1-I（Include-Path）" class="headerlink" title="1. I（Include Path）"></a><strong>1. <code>I</code>（Include Path）</strong></h3><ul><li><p><strong>功能</strong>：告诉编译器在指定的目录中查找头文件。</p></li><li><p><strong>使用场景</strong>：</p><ul><li>头文件不在标准目录（如 <code>/usr/include</code>）中时。</li><li>项目中有自定义的 <code>include/</code> 目录。</li></ul></li><li><p><strong>生效阶段</strong>：<strong>编译阶段</strong>，即将源代码（<code>.c</code> &#x2F; <code>.cpp</code>）转换为目标文件（<code>.o</code>）。</p></li><li><p><strong>示例</strong>：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -Iinclude -c src/main.c -o build/main.o<br><br></code></pre></td></tr></table></figure><ul><li><code>Iinclude</code>：从 <code>include/</code> 目录中查找头文件。</li><li>头文件的查找顺序：<ol><li><code>#include &quot;header.h&quot;</code>：先查找当前目录，再查找 <code>I</code> 指定目录。</li><li><code>#include &lt;header.h&gt;</code>：直接查找标准目录和 <code>I</code> 指定目录。</li></ol></li></ul></li></ul><hr><h3 id="2-L（Library-Path）"><a href="#2-L（Library-Path）" class="headerlink" title="2. L（Library Path）"></a><strong>2. <code>L</code>（Library Path）</strong></h3><ul><li><p><strong>功能</strong>：告诉链接器在指定的目录中查找库文件（<code>.so</code> 或 <code>.a</code>）。</p></li><li><p><strong>使用场景</strong>：</p><ul><li>链接阶段需要引用非系统目录中的库。</li><li>第三方库安装在自定义目录中。</li></ul></li><li><p><strong>生效阶段</strong>：<strong>链接阶段</strong>，即将目标文件（<code>.o</code>）组合为可执行文件。</p></li><li><p><strong>示例</strong>：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -Llib -lmylib -o myprogram build/main.o<br><br></code></pre></td></tr></table></figure><ul><li><code>Llib</code>：从 <code>lib/</code> 目录中查找 <code>libmylib.so</code> 或 <code>libmylib.a</code>。</li><li><code>lmylib</code>：指定链接库 <code>libmylib</code>。</li></ul></li></ul><hr><h3 id="配合使用-I-和-L"><a href="#配合使用-I-和-L" class="headerlink" title="配合使用 I 和 L"></a><strong>配合使用 <code>I</code> 和 <code>L</code></strong></h3><p>在实际开发中，<code>-I</code> 和 <code>-L</code> 经常一起使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -Iinclude -Llib -lmylib -o myprogram src/main.c<br><br></code></pre></td></tr></table></figure><ol><li><strong><code>Iinclude</code></strong>：<ul><li>编译器在 <code>include/</code> 中查找头文件 <code>myheader.h</code>。</li></ul></li><li><strong><code>Llib</code></strong>：<ul><li>链接器在 <code>lib/</code> 中查找库文件 <code>libmylib.so</code> 或 <code>libmylib.a</code>。</li></ul></li><li><strong><code>lmylib</code></strong>：<ul><li>指定链接 <code>libmylib</code>。</li></ul></li></ol><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ol><li><strong><code>I</code> 和 <code>L</code> 的不同点</strong>：<ul><li><strong><code>I</code></strong>：解决的是<strong>头文件</strong>的查找问题，编译阶段生效。</li><li><strong><code>L</code></strong>：解决的是<strong>库文件</strong>的查找问题，链接阶段生效。</li></ul></li><li><strong>配合使用</strong>：<ul><li><code>I</code> 和 <code>L</code> 常搭配使用，因为库的头文件和库文件通常存放在不同的目录下，分别需要两个选项来指定路径。</li></ul></li><li><strong>记忆小技巧</strong>：<ul><li><code>I</code> → Include → 头文件路径。</li><li><code>L</code> → Library → 库文件路径。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>tutorial</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>markdown语法</title>
    <link href="/2025/01/30/markdown%E8%AF%AD%E6%B3%95/"/>
    <url>/2025/01/30/markdown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>Markdown（MD）是一种轻量级的标记语言，常用于编写文档、博客、README 文件等。它的语法简单，易读易写。以下是 Markdown 的基本用法：</p><hr><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a><strong>1. 标题</strong></h2><p>使用 <code>#</code> 号表示标题，<code>#</code> 的个数表示标题的级别（H1~H6）。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 一级标题</span><br><span class="hljs-section">## 二级标题</span><br><span class="hljs-section">### 三级标题</span><br><span class="hljs-section">#### 四级标题</span><br><span class="hljs-section">##### 五级标题</span><br><span class="hljs-section">###### 六级标题</span><br></code></pre></td></tr></table></figure><hr><h2 id="2-段落与换行"><a href="#2-段落与换行" class="headerlink" title="2. 段落与换行"></a><strong>2. 段落与换行</strong></h2><ul><li>普通文本直接写即可，段落之间要空一行。</li><li>行尾加两个空格可以换行。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这是一个段落。<br><br>这是另一个段落。  <br>这一行后面有两个空格，所以它会换行。<br></code></pre></td></tr></table></figure><hr><h2 id="3-强调（加粗、斜体、删除线）"><a href="#3-强调（加粗、斜体、删除线）" class="headerlink" title="3. 强调（加粗、斜体、删除线）"></a><strong>3. 强调（加粗、斜体、删除线）</strong></h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*斜体*</span> 或 <span class="hljs-emphasis">_斜体_</span>  <br><span class="hljs-strong">**加粗**</span> 或 <span class="hljs-strong">__加粗__</span>  <br><span class="hljs-strong">**<span class="hljs-emphasis">*加粗+斜体*</span>**</span> 或 <span class="hljs-strong">__<span class="hljs-emphasis">_加粗+斜体_</span>__</span>  <br>~~删除线~~<br></code></pre></td></tr></table></figure><hr><h2 id="4-列表"><a href="#4-列表" class="headerlink" title="4. 列表"></a><strong>4. 列表</strong></h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a><strong>无序列表</strong></h3><p>使用 <code>-</code>、<code>+</code> 或 <code>*</code> 号表示无序列表：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 项目1<br><span class="hljs-bullet">-</span> 项目2<br><span class="hljs-bullet">  -</span> 子项目1<br><span class="hljs-bullet">  -</span> 子项目2<br><span class="hljs-bullet">+</span> 另一种无序列表<br><span class="hljs-bullet">*</span> 也可以用星号<br></code></pre></td></tr></table></figure><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a><strong>有序列表</strong></h3><p>使用数字加 <code>.</code> 表示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项<br><span class="hljs-bullet">2.</span> 第二项<br><span class="hljs-bullet">   1.</span> 子项1<br><span class="hljs-bullet">   2.</span> 子项2<br></code></pre></td></tr></table></figure><hr><h2 id="5-链接"><a href="#5-链接" class="headerlink" title="5. 链接"></a><strong>5. 链接</strong></h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">普通链接</span>](<span class="hljs-link">https://example.com</span>)<br>[<span class="hljs-string">带标题链接</span>](<span class="hljs-link">https://example.com &quot;悬停显示的标题&quot;</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="6-图片"><a href="#6-图片" class="headerlink" title="6. 图片"></a><strong>6. 图片</strong></h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">图片描述</span>](<span class="hljs-link">https://example.com/image.jpg</span>)<br></code></pre></td></tr></table></figure><p>如果是本地图片：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">本地图片</span>](<span class="hljs-link">./image.png</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="7-代码"><a href="#7-代码" class="headerlink" title="7. 代码"></a><strong>7. 代码</strong></h2><h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a><strong>行内代码</strong></h3><p>使用反引号（<code>`</code>）包裹：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">`console.log(&quot;Hello, Markdown!&quot;)`</span><br></code></pre></td></tr></table></figure><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a><strong>代码块</strong></h3><p>使用三个反引号（<code>```</code>）包裹，并可指定语言：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">```python</span><br><span class="hljs-code">def hello():</span><br><span class="hljs-code">    print(&quot;Hello, Markdown!&quot;)</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-comment">## **8. 引用**</span><br><span class="hljs-string">```markdown</span><br><span class="hljs-string">&gt;</span> <span class="hljs-string">这是一个引用</span><br><span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">这是嵌套引用</span><br></code></pre></td></tr></table></figure><hr><h2 id="9-分割线"><a href="#9-分割线" class="headerlink" title="9. 分割线"></a><strong>9. 分割线</strong></h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br><span class="hljs-strong">***</span><br><span class="hljs-strong">__<span class="hljs-emphasis">_</span></span><br></code></pre></td></tr></table></figure><hr><h2 id="10-表格"><a href="#10-表格" class="headerlink" title="10. 表格"></a><strong>10. 表格</strong></h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">| 姓名  | 年龄 | 职业 |<br>|------|----|----|<br>| 张三  | 25 | 程序员 |<br>| 李四  | 30 | 设计师 |<br></code></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th>姓名</th><th>年龄</th><th>职业</th></tr></thead><tbody><tr><td>张三</td><td>25</td><td>程序员</td></tr><tr><td>李四</td><td>30</td><td>设计师</td></tr></tbody></table><hr><h2 id="11-任务列表"><a href="#11-任务列表" class="headerlink" title="11. 任务列表"></a><strong>11. 任务列表</strong></h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> [x] 已完成任务<br><span class="hljs-bullet">-</span> [ ] 待办任务<br><span class="hljs-bullet">-</span> [ ] 另一个待办<br></code></pre></td></tr></table></figure><hr><h2 id="12-HTML-语法"><a href="#12-HTML-语法" class="headerlink" title="12. HTML 语法"></a><strong>12. HTML 语法</strong></h2><p>Markdown 也可以直接嵌入 HTML 代码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red;&quot;</span>&gt;</span></span>这是红色文本<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><p>这些是 Markdown 的基本语法，掌握这些就能应对大部分 Markdown 书写需求！ 🚀</p>]]></content>
    
    
    <categories>
      
      <category>tutorial</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NetworkSecurity</title>
    <link href="/2025/01/30/NetworkSecurity/"/>
    <url>/2025/01/30/NetworkSecurity/</url>
    
    <content type="html"><![CDATA[<blockquote><p>计算机网络安全是保障信息系统免受攻击、破坏和未经授权访问的关键领域。其中，<strong>DDoS（分布式拒绝服务）攻击</strong>是最常见的网络攻击方式之一。此外，还有多种网络安全威胁，如<strong>SQL 注入、XSS（跨站脚本攻击）、社会工程学攻击、恶意软件等</strong>。以下是对 DDoS 及其他主要攻击方式的详细介绍。</p></blockquote><hr><h2 id="1-DDoS（分布式拒绝服务）攻击"><a href="#1-DDoS（分布式拒绝服务）攻击" class="headerlink" title="1. DDoS（分布式拒绝服务）攻击"></a><strong>1. DDoS（分布式拒绝服务）攻击</strong></h2><p>DDoS（Distributed Denial of Service）攻击是一种通过大量恶意流量使目标服务器或网络资源瘫痪的攻击方式。</p><h3 id="1-1-DDoS-攻击原理"><a href="#1-1-DDoS-攻击原理" class="headerlink" title="1.1 DDoS 攻击原理"></a><strong>1.1 DDoS 攻击原理</strong></h3><p>DDoS 攻击者通常使用**僵尸网络（Botnet）**控制成千上万的受感染计算机，同时向目标服务器发送大量流量或请求，使其资源耗尽，导致正常用户无法访问。</p><h3 id="1-2-主要-DDoS-攻击类型"><a href="#1-2-主要-DDoS-攻击类型" class="headerlink" title="1.2 主要 DDoS 攻击类型"></a><strong>1.2 主要 DDoS 攻击类型</strong></h3><ul><li><p><strong>流量型攻击（Volume-based Attacks）</strong><br>通过大量数据包或请求耗尽带宽，常见方式包括：</p><ul><li><strong>UDP 洪水（UDP Flood）</strong>：发送大量 UDP 数据包，消耗服务器带宽。</li><li><strong>ICMP 洪水（Ping Flood）</strong>：发送大量 ICMP（如 ping）请求，使服务器超载。</li><li><strong>SYN 洪水（SYN Flood）</strong>：发送大量 TCP SYN 连接请求，占用服务器连接资源。</li></ul></li><li><p><strong>协议型攻击（Protocol Attacks）</strong><br>通过消耗服务器处理能力进行攻击，常见方式包括：</p><ul><li><strong>TCP SYN Flood</strong>：利用 TCP 三次握手机制，使服务器保持半开连接状态。</li><li><strong>Ping of Death</strong>：发送超大 ICMP 数据包导致系统崩溃。</li><li><strong>Smurf 攻击</strong>：伪造 ICMP 请求，放大攻击流量。</li></ul></li><li><p><strong>应用层攻击（Application Layer Attacks）</strong><br>直接攻击 Web 服务器或数据库，导致服务不可用：</p><ul><li><strong>HTTP Flood</strong>：发送大量 HTTP 请求，使服务器处理过载。</li><li><strong>Slowloris 攻击</strong>：建立多个未完成的 HTTP 连接，拖垮服务器。</li></ul></li></ul><h3 id="1-3-DDoS-防御方法"><a href="#1-3-DDoS-防御方法" class="headerlink" title="1.3 DDoS 防御方法"></a><strong>1.3 DDoS 防御方法</strong></h3><ul><li><strong>流量清洗</strong>：使用 CDN 或云防护（如 Cloudflare、AWS Shield）过滤恶意流量。</li><li><strong>限速（Rate Limiting）</strong>：限制单位时间内的连接或请求数。</li><li><strong>黑白名单</strong>：屏蔽可疑 IP，允许可信 IP 访问。</li><li><strong>流量分析</strong>：使用防火墙、IDS&#x2F;IPS 监测异常流量模式。</li><li><strong>负载均衡</strong>：使用多个服务器分散流量，避免单点过载。</li></ul><hr><h2 id="2-其他主要网络安全攻击方式"><a href="#2-其他主要网络安全攻击方式" class="headerlink" title="2. 其他主要网络安全攻击方式"></a><strong>2. 其他主要网络安全攻击方式</strong></h2><p>除了 DDoS，网络安全领域还有许多常见攻击手段，如 SQL 注入、XSS 攻击、恶意软件等。</p><h3 id="2-1-SQL-注入（SQL-Injection）"><a href="#2-1-SQL-注入（SQL-Injection）" class="headerlink" title="2.1 SQL 注入（SQL Injection）"></a><strong>2.1 SQL 注入（SQL Injection）</strong></h3><p><strong>攻击原理</strong>：攻击者在输入字段（如登录框、搜索框）插入恶意 SQL 代码，从而篡改或窃取数据库中的数据。</p><p><strong>示例攻击代码</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-comment">-- &#x27; AND password = &#x27;password&#x27;;</span><br></code></pre></td></tr></table></figure><p>其中 <code>--</code> 让 SQL 语句后面的内容变成注释，从而绕过身份验证。</p><p><strong>防御措施</strong>：</p><ul><li>使用 <strong>参数化查询</strong> 或 <strong>ORM</strong>（如 Python 的 SQLAlchemy）。</li><li>限制数据库用户权限，避免数据库泄露。</li><li>过滤和验证用户输入，禁止特殊字符（如 <code>&#39;</code>, <code>--</code>, <code>;</code>）。</li></ul><hr><h3 id="2-2-XSS（跨站脚本攻击）"><a href="#2-2-XSS（跨站脚本攻击）" class="headerlink" title="2.2 XSS（跨站脚本攻击）"></a><strong>2.2 XSS（跨站脚本攻击）</strong></h3><p><strong>攻击原理</strong>：攻击者在网页输入框或 URL 参数中插入恶意 JavaScript 代码，使其在受害者浏览器中执行，导致窃取用户信息或 Cookie。</p><p><strong>示例攻击代码</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你的账户已被黑客劫持！&#x27;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>攻击方式</strong>：</p><ul><li><strong>存储型 XSS</strong>：恶意代码存储在数据库中，影响所有访问该页面的用户。</li><li><strong>反射型 XSS</strong>：恶意代码通过 URL 传递，仅影响特定访问者。</li><li><strong>DOM 型 XSS</strong>：利用 JavaScript 修改页面 DOM 结构，从而执行恶意代码。</li></ul><p><strong>防御措施</strong>：</p><ul><li><strong>输入过滤</strong>：禁止 <code>&lt;script&gt;</code>、<code>onerror=</code> 等关键字。</li><li><strong>内容安全策略（CSP）</strong>：限制可执行的 JavaScript 资源。</li><li><strong>HTTPOnly &amp; Secure Cookie</strong>：防止 JavaScript 窃取 Cookie。</li></ul><hr><h3 id="2-3-CSRF（跨站请求伪造）"><a href="#2-3-CSRF（跨站请求伪造）" class="headerlink" title="2.3 CSRF（跨站请求伪造）"></a><strong>2.3 CSRF（跨站请求伪造）</strong></h3><p><strong>攻击原理</strong>：攻击者伪造合法用户的身份，在不知情的情况下发起恶意请求。</p><p><strong>示例攻击</strong>：<br>如果用户已登录银行网站，攻击者诱导用户点击恶意链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://bank.com/transfer?to=attacker&amp;amount=1000&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>导致用户账户资金被转移。</p><p><strong>防御措施</strong>：</p><ul><li>使用 <strong>CSRF Token</strong> 验证请求合法性。</li><li>限制 HTTP Referer，检测来源是否合法。</li><li>采用 <strong>SameSite Cookie</strong> 机制，防止跨站访问。</li></ul><hr><h3 id="2-4-恶意软件（Malware）"><a href="#2-4-恶意软件（Malware）" class="headerlink" title="2.4 恶意软件（Malware）"></a><strong>2.4 恶意软件（Malware）</strong></h3><p><strong>恶意软件（Malware）</strong> 是专门用于入侵、破坏或窃取信息的软件，主要包括：</p><ul><li><strong>病毒（Virus）</strong>：附加在合法程序上，随运行传播。</li><li><strong>蠕虫（Worm）</strong>：独立传播，不依赖宿主程序，如“震网”病毒。</li><li><strong>木马（Trojan）</strong>：伪装成正常软件，窃取数据或远程控制设备。</li><li><strong>勒索软件（Ransomware）</strong>：加密用户数据，要求支付赎金解锁（如 WannaCry）。</li><li><strong>间谍软件（Spyware）</strong>：悄悄收集用户信息，如键盘记录器。</li></ul><p><strong>防御措施</strong>：</p><ul><li>安装 <strong>防病毒软件</strong> 并定期更新病毒库。</li><li><strong>及时更新系统补丁</strong>，防止漏洞被利用。</li><li><strong>不随意下载不明来源的软件</strong>，避免中招。</li></ul><hr><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a><strong>3. 总结</strong></h2><table><thead><tr><th>攻击类型</th><th>原理</th><th>主要危害</th><th>防御措施</th></tr></thead><tbody><tr><td><strong>DDoS 攻击</strong></td><td>通过大量流量或请求使服务器宕机</td><td>网站不可用，业务损失</td><td>限流、CDN、流量清洗</td></tr><tr><td><strong>SQL 注入</strong></td><td>通过 SQL 语句篡改数据库</td><td>数据泄露、账户被盗</td><td>参数化查询、输入过滤</td></tr><tr><td><strong>XSS</strong></td><td>插入恶意 JavaScript</td><td>盗取用户信息</td><td>CSP、安全编码</td></tr><tr><td><strong>CSRF</strong></td><td>伪造用户请求</td><td>资金被盗、账户被劫持</td><td>CSRF Token、SameSite Cookie</td></tr><tr><td><strong>恶意软件</strong></td><td>通过病毒、木马等破坏系统</td><td>数据被加密、设备失控</td><td>安装杀毒软件、定期更新</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DataLink</title>
    <link href="/2025/01/30/DataLink/"/>
    <url>/2025/01/30/DataLink/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Network</title>
    <link href="/2025/01/30/Network/"/>
    <url>/2025/01/30/Network/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Transport</title>
    <link href="/2025/01/30/Transport/"/>
    <url>/2025/01/30/Transport/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Appplication</title>
    <link href="/2025/01/30/Appplication/"/>
    <url>/2025/01/30/Appplication/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ComputerScienceNetwork</title>
    <link href="/2025/01/30/ComputerScienceNetwork/"/>
    <url>/2025/01/30/ComputerScienceNetwork/</url>
    
    <content type="html"><![CDATA[<p>计算机网络通常有两种主要的分层模型：  </p><ol><li><strong>OSI 七层模型</strong>（理论模型，较为标准）  </li><li><strong>TCP&#x2F;IP 四层模型</strong>（实际应用更广）</li></ol><hr><h3 id="1-OSI-七层模型"><a href="#1-OSI-七层模型" class="headerlink" title="1. OSI 七层模型"></a><strong>1. OSI 七层模型</strong></h3><p>OSI（Open Systems Interconnection，开放式系统互连）模型是一个理论参考模型，分为 7 层，每一层都有不同的功能：</p><table><thead><tr><th>层级</th><th>名称</th><th>作用</th></tr></thead><tbody><tr><td><strong>7</strong></td><td><strong>应用层（Application）</strong></td><td>提供应用程序的网络接口，如 HTTP、FTP、SMTP</td></tr><tr><td><strong>6</strong></td><td><strong>表示层（Presentation）</strong></td><td>数据格式转换，加密解密，如 JPEG、SSL</td></tr><tr><td><strong>5</strong></td><td><strong>会话层（Session）</strong></td><td>负责会话管理，如登录控制、会话恢复</td></tr><tr><td><strong>4</strong></td><td><strong>传输层（Transport）</strong></td><td>可靠传输、数据分段，如 TCP、UDP</td></tr><tr><td><strong>3</strong></td><td><strong>网络层（Network）</strong></td><td>负责路由和寻址，如 IP、ICMP</td></tr><tr><td><strong>2</strong></td><td><strong>数据链路层（Data Link）</strong></td><td>负责数据帧传输，如 MAC、PPP</td></tr><tr><td><strong>1</strong></td><td><strong>物理层（Physical）</strong></td><td>负责硬件传输，如光纤、网线、Wi-Fi</td></tr></tbody></table><hr><h3 id="2-TCP-IP-四层模型"><a href="#2-TCP-IP-四层模型" class="headerlink" title="2. TCP&#x2F;IP 四层模型"></a><strong>2. TCP&#x2F;IP 四层模型</strong></h3><p>相比 OSI，TCP&#x2F;IP 模型更贴近实际应用，只有 4 层：</p><table><thead><tr><th>层级</th><th>OSI 对应</th><th>名称</th><th>作用</th></tr></thead><tbody><tr><td><strong>4</strong></td><td>7、6、5</td><td><strong>应用层</strong></td><td>提供应用协议，如 HTTP、DNS</td></tr><tr><td><strong>3</strong></td><td>4</td><td><strong>传输层</strong></td><td>端到端通信，如 TCP、UDP</td></tr><tr><td><strong>2</strong></td><td>3</td><td><strong>网络层</strong></td><td>负责寻址和路由，如 IP、ICMP</td></tr><tr><td><strong>1</strong></td><td>2、1</td><td><strong>链路层</strong></td><td>物理传输，如 Ethernet、Wi-Fi</td></tr></tbody></table><hr><h3 id="简单理解"><a href="#简单理解" class="headerlink" title="简单理解"></a><strong>简单理解</strong></h3><ul><li>OSI 七层模型更细致，但应用较少，主要用于学习和标准化参考。  </li><li>TCP&#x2F;IP 四层模型更实际，是互联网真正使用的模型。  </li><li>传输层的 <strong>TCP（可靠传输）</strong> 和 <strong>UDP（快速但不可靠）</strong> 是核心协议。  </li><li>网络层的 <strong>IP</strong> 负责寻址，<strong>ICMP</strong> 负责网络诊断（如 ping 命令）。</li></ul>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>macos下安装PD20Linux虚拟机以及PDTools的坑</title>
    <link href="/2025/01/29/macos%E4%B8%8B%E5%AE%89%E8%A3%85pd20%E4%BB%A5%E5%8F%8Apdtools%E7%9A%84%E5%9D%91/"/>
    <url>/2025/01/29/macos%E4%B8%8B%E5%AE%89%E8%A3%85pd20%E4%BB%A5%E5%8F%8Apdtools%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h2 id="安装PD20虚拟机的问题"><a href="#安装PD20虚拟机的问题" class="headerlink" title="安装PD20虚拟机的问题"></a>安装PD20虚拟机的问题</h2><p>～</p><h2 id="安装PDTools的问题"><a href="#安装PDTools的问题" class="headerlink" title="安装PDTools的问题"></a>安装PDTools的问题</h2><ol><li>没有.&#x2F;install 权限<blockquote><p>点击安装tools桌面会出现CD<br>需要先<strong>把&#x2F;media&#x2F;cdrom0拷贝到你的工作目录上</strong><br><img src="/../static/macosInstallPDTools/copy1.jpg" alt="拷贝"><br>这样才能执行.&#x2F;install</p></blockquote></li></ol><p>2.换源</p><ul><li><code>vim /etc/apt/sources.list</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">deb http://mirrors.ustc.edu.cn/kali kali-rolling main contrib non-free non-free-firmware<br>deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main contrib non-free non-free-firmware                                     <br></code></pre></td></tr></table></figure><ol start="3"><li>安装失败 缺少安装包</li></ol><ul><li>出现这些报错<br><img src="/../static/macosInstallPDTools/error1.jpg" alt="拷贝"><br><img src="/../static/macosInstallPDTools/error2.jpg" alt="拷贝"></li></ul><h2 id="solution："><a href="#solution：" class="headerlink" title="solution："></a>solution：</h2><p>需要安装对应依赖,对应版本的package  </p><ol><li>检查内核版本<br>   <code>uname -r</code></li><li>安装与当前内核版本匹配的头文件<br>   <code>sudo apt-get install linux-headers-$(uname -r)</code></li><li>更新软件包列表:<br>   <code>sudo apt-get update</code></li><li>安装其他依赖包<br>   <code>sudo apt-get install binfmt-support libelf-dev</code></li></ol><ul><li>也可以直接去官网上下载对应安装包 找到<strong>对应的版本号</strong> 像我的就是6.6.15<br><img src="/../static/macosInstallPDTools/package1.jpg" alt="拷贝"><br><img src="/../static/macosInstallPDTools/package2.jpg" alt="拷贝"></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul><li>进去你第一步cp -r的目录 执行<code>./install</code><br><img src="/../static/macosInstallPDTools/success.jpg" alt="拷贝"></li></ul>]]></content>
    
    
    <categories>
      
      <category>issue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>issue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5-longestPalidrome</title>
    <link href="/2025/01/29/5-longestPalidrome/"/>
    <url>/2025/01/29/5-longestPalidrome/</url>
    
    <content type="html"><![CDATA[<h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>(),l = <span class="hljs-number">0</span>,r = <span class="hljs-number">0</span>,length = <span class="hljs-number">1</span>,index = <span class="hljs-number">0</span>,max_length = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) &#123;<br>            l = i - <span class="hljs-number">1</span>;<br>            r = i + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (l &gt;= <span class="hljs-number">0</span> &amp;&amp; s[l] == s[i]) &#123;<br>                length++;<br>                l--;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (r &lt; n &amp;&amp; s[r] == s[i]) &#123;<br>                length++;<br>                r++;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (l &gt;= <span class="hljs-number">0</span> &amp;&amp; r &lt; n &amp;&amp; s[l] == s[r]) &#123;<br>                length += <span class="hljs-number">2</span>;<br>                l--;<br>                r++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (length &gt; max_length) &#123;<br>                max_length = length;<br>                index = l;<br>            &#125;<br>            length = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">substr</span>(index + <span class="hljs-number">1</span>,max_length);<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithms</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0-Home-page</title>
    <link href="/2025/01/29/0-Home-page/"/>
    <url>/2025/01/29/0-Home-page/</url>
    
    <content type="html"><![CDATA[<h1 id="Home-page"><a href="#Home-page" class="headerlink" title="Home page"></a>Home page</h1>]]></content>
    
    
    <categories>
      
      <category>master</category>
      
    </categories>
    
    
    <tags>
      
      <tag>master</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.addTwoNumbers</title>
    <link href="/2025/01/29/2-addTwoNumbers/"/>
    <url>/2025/01/29/2-addTwoNumbers/</url>
    
    <content type="html"><![CDATA[<h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>      <span class="hljs-type">int</span> val;<br>      ListNode *next;<br>      <span class="hljs-built_in">ListNode</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>      <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>      <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x, ListNode *next) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(next) &#123;&#125;<br> &#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>        ListNode* head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">-1</span>,<span class="hljs-literal">nullptr</span>);<br>        ListNode* temp = head;  <span class="hljs-comment">//创建dummyNode 简化边界条件计算</span><br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (l1 || l2) &#123;<br>            <span class="hljs-type">int</span> a = l1 == <span class="hljs-literal">nullptr</span>?<span class="hljs-number">0</span>:l1-&gt;val;    <span class="hljs-comment">//如果l1为nullptr 表示l1遍历完了 赋值为0</span><br>            <span class="hljs-type">int</span> b = l2 == <span class="hljs-literal">nullptr</span>?<span class="hljs-number">0</span>:l2-&gt;val;    <span class="hljs-comment">//l2同理</span><br>            sum += a + b;<br>            temp-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(sum % <span class="hljs-number">10</span>);<br>            sum /= <span class="hljs-number">10</span>;<br>            temp = temp-&gt;next;<br>            <span class="hljs-keyword">if</span> (l1) l1 = l1-&gt;next;<br>            <span class="hljs-keyword">if</span> (l2) l2 = l2-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (sum &gt; <span class="hljs-number">0</span>) temp-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> head-&gt;next;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">review 2024.6.11</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> carry = <span class="hljs-number">0</span>;<br>        ListNode* ans = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>();<br>        ListNode* temp = ans;<br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">nullptr</span> || l2 != <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-type">int</span> x,y,z;<br>            <span class="hljs-keyword">if</span> (!l1) &#123;<br>                x = <span class="hljs-number">0</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                x = l1-&gt;val;<br>                l1 = l1-&gt;next;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!l2) &#123;<br>                y = <span class="hljs-number">0</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                y = l2-&gt;val;<br>                l2 = l2-&gt;next;<br>            &#125;<br>            temp-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>();<br>            temp = temp-&gt;next;<br>            z = carry + x + y;<br>            <span class="hljs-keyword">if</span> (z &gt; <span class="hljs-number">9</span>) &#123;<br>                carry = <span class="hljs-number">1</span>;<br>                temp-&gt;val = z % <span class="hljs-number">10</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                temp-&gt;val = z;<br>                carry = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (carry == <span class="hljs-number">1</span>) &#123;<br>            temp-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>();<br>            temp-&gt;next-&gt;val = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithms</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.lengthOfLongestSubstring</title>
    <link href="/2025/01/29/3-lengthOfLongestSubstring/"/>
    <url>/2025/01/29/3-lengthOfLongestSubstring/</url>
    
    <content type="html"><![CDATA[<h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">滑动窗口</span><br><span class="hljs-comment">1.遍历string 用hash存储每个char出现的次数</span><br><span class="hljs-comment">2.每次记录最大的length 当出现重复元素时 移动left去重</span><br><span class="hljs-comment">3.更新length = right - left + 1</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>,r = <span class="hljs-number">0</span>;<br>        unordered_map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; cnt;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (;r &lt; n;r++) &#123;<br>            cnt[s[r]]++;<br>            <span class="hljs-keyword">while</span> (cnt[s[r]] &gt; <span class="hljs-number">1</span>) &#123;     <span class="hljs-comment">//去重操作</span><br>                cnt[s[l]]--;            <span class="hljs-comment">//先在hashTable中修改</span><br>                l++;                    <span class="hljs-comment">//移动left</span><br>            &#125;   <br>            ans = <span class="hljs-built_in">max</span>(ans,r-l<span class="hljs-number">+1</span>);       <span class="hljs-comment">//uodate longest length</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">review 2024.2.23</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; record;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>,i = <span class="hljs-number">0</span>;j &lt; s.<span class="hljs-built_in">size</span>();j++) &#123;<br>            record[s[j]]++;<br>            cnt++;<br>            <span class="hljs-keyword">while</span> (record[s[j]] &gt; <span class="hljs-number">1</span>) &#123;<br>                record[s[i++]]--;<br>                cnt--;<br>            &#125;<br>            ret = <span class="hljs-built_in">max</span>(cnt,ret);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">review 6.19</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        unordered_set&lt;<span class="hljs-type">char</span>&gt; hash;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>,r = <span class="hljs-number">0</span>;r &lt; s.<span class="hljs-built_in">size</span>();r++) &#123;<br>            <span class="hljs-keyword">while</span> (hash.<span class="hljs-built_in">find</span>(s[r]) != hash.<span class="hljs-built_in">end</span>()) &#123;<br>                hash.<span class="hljs-built_in">erase</span>(s[l]);<br>                l++;<br>            &#125;<br>            hash.<span class="hljs-built_in">insert</span>(s[r]);<br>            ans = <span class="hljs-built_in">max</span>(ans,r - l + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">review 2024.7.8</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>,r = <span class="hljs-number">0</span>;<br>        unordered_set&lt;<span class="hljs-type">int</span>&gt; hash;<br>        <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (;r &lt; s.<span class="hljs-built_in">size</span>();r++) &#123;<br>            <span class="hljs-keyword">while</span> (hash.<span class="hljs-built_in">contains</span>(s[r])) &#123; <span class="hljs-comment">//c++20</span><br>                hash.<span class="hljs-built_in">erase</span>(s[l++]);<br>            &#125;<br>            hash.<span class="hljs-built_in">insert</span>(s[r]);<br>            ret = <span class="hljs-built_in">max</span>(ret,r - l + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Algorithms</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-twoSum</title>
    <link href="/2025/01/28/1-twoSum/"/>
    <url>/2025/01/28/1-twoSum/</url>
    
    <content type="html"><![CDATA[<h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">23.12.17</span><br><span class="hljs-comment">solution：</span><br><span class="hljs-comment">因为是寻找匹配元素 寻找 target - 每一个元素的另一元素</span><br><span class="hljs-comment">所以想到hashtable 并且要return下标 所以要用std::unordered_map 底层用哈希表实现 无序 不可以重复</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">1.创建一个empty map</span><br><span class="hljs-comment">2.遍历整个vector 在map中找是否存在匹配值：</span><br><span class="hljs-comment">                                    如果不匹配 就把元素插入到map中</span><br><span class="hljs-comment">                                    如果匹配 就return</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        std::unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; hashtable;<br>        <span class="hljs-type">int</span> len = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; len;i++) &#123;<br>            <span class="hljs-type">int</span> temp = target-nums[i];<br>            <span class="hljs-keyword">if</span> (hashtable.<span class="hljs-built_in">find</span>(temp) != hashtable.<span class="hljs-built_in">end</span>()) &#123;<br>                <span class="hljs-keyword">return</span> &#123;hashtable[temp],i&#125;;<br>            &#125;<br>            hashtable[nums[i]] = i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>&#125;;<br><br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">2023.12.17</span><br><span class="hljs-comment">brute force     O(n^2)</span><br><span class="hljs-comment">1.暴力两个for循环 第一个loop遍历n-1个元素</span><br><span class="hljs-comment">2.因为一个位置的两个元素不能重复使用 所以第二个loop从i+1开始遍历整个vector</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        std::vector&lt;<span class="hljs-type">int</span>&gt; ret;<br>        <span class="hljs-type">int</span> len = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; len<span class="hljs-number">-1</span>;i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i<span class="hljs-number">+1</span>;j &lt; len;j++) &#123;<br>                <span class="hljs-keyword">if</span> (nums[i] + nums[j] == target) &#123;<br>                    ret.<span class="hljs-built_in">push_back</span>(i);<br>                    ret.<span class="hljs-built_in">push_back</span>(j);<br>                    <span class="hljs-keyword">return</span> ret;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="summary："><a href="#summary：" class="headerlink" title="summary："></a>summary：</h3><p>1.c++的哈希表用了动态数组的方式和哈希函数组成<br>2.插入可以用pair函数 也可以写成 nums_map.insert({nums[i],i}); 用初始化列表的方式</p>]]></content>
    
    
    <categories>
      
      <category>Algorithms</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithms</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
